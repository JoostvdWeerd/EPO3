library IEEE;
use IEEE.std_logic_1164.ALL;
use IEEE.std_logic_unsigned.ALL;
use IEEE.numeric_std.ALL;

ENTITY player is
  
  port  (   x_control   : in  std_logic_vector(1 downto 0);
            y_control   : in  std_logic_vector(1 downto 0);
            --  case    : in  std_logic_vector(? downto 0); voor evt levens etc
            clk         : in  std_logic;
            reset       : in  std_logic;
            x_position  : out std_logic_vector(7 downto 0);
            y_position  : out std_logic_vector(7 downto 0)
      );
end player;

ARCHITECTURE fsm of player is
  
  type state_fsm is ( start, move_right, move_left, move_down, move_up, still);
    
signal new_state    : state_fsm;
signal state        : state_fsm;

begin
  process(clk)
  begin
    if (clk'event and clk = '1') then
      if (reset = '1') then
        state <= start;
      else
        state <= new_state;
      end if;
    end if;
  end process;
  
  process(state, x_control)
  begin
    case state is
    when start =>
      x_position <= "00111111";
      if (x_control = "01") then
        new_state <= move_right;
      elsif ( x_control = "10") then
        new_state <= move_left;
      else 
        new_state <= still;
      end if;
      
    when move_right =>
      x_position == x_position + "00000001";
      if (x_control = "01") then
        new_state <= move_right;
      elsif ( x_control = "10") then
        new_state <= move_left;
      else 
        new_state <= still;
      end if;
      
    when move_left =>
      x_position <= x_position - "00000001";
      if (x_control = "01") then
        new_state <= move_right;
      elsif ( x_control = "10") then
        new_state <= move_left;
      else 
        new_state <= still;
      end if;
      
    when still =>
      x_position <= x_position;
      if (x_control = "01") then
        new_state <= move_right;
      elsif ( x_control = "10") then
        new_state <= move_left;
      else 
        new_state <= still;
      end if;
    end case;
  end process;
  
  process(state, y_control)
  begin
    case state is
    when start => 
      y_position <= "01111111"
      if (y_control = "01") then
        new_state <= move_up;
      elsif ( y_control = "10") then
        new_state <= move_down;
      else 
        new_state <= still;
      end if;
      
    when move_up =>
      y_position <= y_position + "00000001";
      if (y_control = "01") then
        new_state <= move_up;
      elsif ( y_control = "10") then
        new_state <= move_down;
      else 
        new_state <= still;
      end if;
      
    when move_down =>
      y_position <= y_position - "00000001";
      if (y_control = "01") then
        new_state <= move_up;
      elsif ( y_control = "10") then
        new_state <= move_down;
      else 
        new_state <= still;
      end if;
      
    when still => 
      y_position <= y_position;
      if (y_control = "01") then
        new_state <= move_up;
      elsif ( y_control = "10") then
        new_state <= move_down;
      else 
        new_state <= still;
      end if;
    end case;
  end process;
end architecture fsm;
      
      
        
