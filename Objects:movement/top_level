library IEEE;
use IEEE.std_logic_1164.ALL;

entity objandmove is
   port(clk        : in  std_logic;
        reset      : in  std_logic;
        frame_ready		   : in  std_logic;
        left		: in std_logic;
	right		: in std_logic;
	up		: in std_logic;
	down		: in std_logic;
        shoot      : in  std_logic;
        spawn1      : in  std_logic;
	spawn2      : in  std_logic;
	spawn3      : in  std_logic;
	spawn4      : in  std_logic;
	spawn5      : in  std_logic;
	spawn6      : in  std_logic;
        coll_enemy_1  : in  std_logic;
        coll_enemy_2  : in  std_logic;
        coll_enemy_3  : in  std_logic;
        coll_enemy_4  : in  std_logic;
        coll_enemy_5  : in  std_logic;
        coll_enemy_6  : in  std_logic;
        coll_bullet_1 : in  std_logic;
        coll_bullet_2 : in  std_logic;
        coll_bullet_3 : in  std_logic;
        coll_player   : in  std_logic;       
        spawn1_y   : in  std_logic_vector(8 downto 0);	
        spawn2_y   : in  std_logic_vector(8 downto 0);	
        spawn3_y   : in  std_logic_vector(8 downto 0);
	spawn4_y	: in std_logic_vector(8 downto 0);
	spawn5_y	: in std_logic_vector(8 downto 0);
	spawn6_y	: in std_logic_vector(8 downto 0);
        x_position   : out std_logic_vector(8 downto 0);
        y_position   : out std_logic_vector(8 downto 0);
        bullet_xposition1  : out std_logic_vector(8 downto 0);
        bullet_yposition1  : out std_logic_vector(8 downto 0);
        bullet_xposition2  : out std_logic_vector(8 downto 0);
        bullet_yposition2  : out std_logic_vector(8 downto 0);
        bullet_xposition3  : out std_logic_vector(8 downto 0);
        bullet_yposition3  : out std_logic_vector(8 downto 0);
        enemy_xposition1   : out std_logic_vector(8 downto 0);
        enemy_yposition1   : out std_logic_vector(8 downto 0);
	enemy_xposition2   : out std_logic_vector(8 downto 0);
        enemy_yposition2   : out std_logic_vector(8 downto 0);
	enemy_xposition3   : out std_logic_vector(8 downto 0);
        enemy_yposition3   : out std_logic_vector(8 downto 0);
	enemy_xposition4   : out std_logic_vector(8 downto 0);
        enemy_yposition4   : out std_logic_vector(8 downto 0);
	enemy_xposition5   : out std_logic_vector(8 downto 0);
        enemy_yposition5   : out std_logic_vector(8 downto 0);
	enemy_xposition6   : out std_logic_vector(8 downto 0);
        enemy_yposition6   : out std_logic_vector(8 downto 0);
        alive1      : out std_logic;
	alive2      : out std_logic;
	alive3      : out std_logic;
	alive4      : out std_logic;
	alive5      : out std_logic;
	alive6      : out std_logic);
end objandmove;

architecture structural of objandmove is


	component player
		port(	clk         : in  std_logic;
			reset	    : in 	std_logic;
        			frame_ready : in  std_logic;
        			left		: in  std_logic;
        			right		: in  std_logic;
				up   		: in  std_logic;
        			down		: in  std_logic;
        			x_position  : out std_logic_vector(8 downto 0);
        			y_position  : out std_logic_vector(8 downto 0)
		);
	end component;

	component enemy 
		port(	clk         : in  std_logic;
		        reset       : in  std_logic;
		        spawn       : in  std_logic;
		        collision   : in  std_logic;
		        
		        y_spawn_pos : in  std_logic_vector(8 downto 0);
		        alive       : out std_logic;
		        enemy_xposition  : out std_logic_vector(8 downto 0);
		        enemy_yposition  : out std_logic_vector(8 downto 0)
		);
	end component;

	component bullet
		 port(	clk          : in  std_logic;
		        reset        : in  std_logic;
		        shoot        : in  std_logic;
		        collision    : in  std_logic;
		        frame_ready  : in  std_logic;
		        x_position   : in  std_logic_vector(8 downto 0);
		        y_position   : in  std_logic_vector(8 downto 0);
		        bullet_state : out std_logic;
		        x_bullet     : out std_logic_vector(8 downto 0);
		        y_bullet     : out std_logic_vector(8 downto 0)
		);
	end component;
		
	component control_bullet
		port(	clk			: in std_logic;
			reset			: in std_logic;
			shoot         			: in  std_logic;
			bullet_inscreen_1			: in  std_logic;
			bullet_inscreen_2			: in std_logic;
			bullet_inscreen_3			: in std_logic;
		        shootb1       : out std_logic;
        			shootb2       : out std_logic;
        			shootb3       : out std_logic
		);
	end component;

	signal	player_xposition_bullet1, player_xposition_bullet2, player_xposition_bullet3	: std_logic_vector(8 downto 0);
	signal	player_yposition_bullet1, player_yposition_bullet2, player_yposition_bullet3 : std_logic_vector(8 downto 0);
	
	signal 	bullet_state1, bullet_state2, bullet_state3					: std_logic;
	signal 	shoot_bullet1, shoot_bullet2, shoot_bullet3					: std_logic;

begin
	player_movement :	player port map	(clk, reset, frame_ready, left, right, up, down, x_position, y_position);
	enemy_movement1		: enemy 	port map	(clk, reset, spawn1, coll_enemy_1, spawn1_y, alive1, enemy_xposition1, enemy_yposition1);
	enemy_movement2		: enemy 	port map	(clk, reset, spawn2, coll_enemy_2, spawn2_y, alive2, enemy_xposition2, enemy_yposition2);
	enemy_movement3		: enemy 	port map	(clk, reset, spawn3, coll_enemy_3, spawn3_y, alive3, enemy_xposition3, enemy_yposition3);
	enemy_movement4		: enemy 	port map	(clk, reset, spawn4, coll_enemy_4, spawn4_y, alive4, enemy_xposition4, enemy_yposition4);
	enemy_movement5		: enemy 	port map	(clk, reset, spawn5, coll_enemy_5, spawn5_y, alive5, enemy_xposition5, enemy_yposition5);
	enemy_movement6		: enemy 	port map	(clk, reset, spawn6, coll_enemy_6, spawn6_y, alive6, enemy_xposition6, enemy_yposition6);
	bullet1		: bullet 			port map	(clk, reset, shoot_bullet1, coll_bullet_1, frame_ready, player_xposition_bullet1, player_yposition_bullet1, bullet_state1, bullet_xposition1, bullet_yposition1);
	bullet2		: bullet 			port map	(clk, reset, shoot_bullet2, coll_bullet_2, frame_ready, player_xposition_bullet2, player_yposition_bullet2, bullet_state2, bullet_xposition2, bullet_yposition2);
	bullet3		: bullet 			port map	(clk, reset, shoot_bullet3, coll_bullet_3, frame_ready, player_xposition_bullet3, player_yposition_bullet3, bullet_state3, bullet_xposition3, bullet_yposition3);
	bullet_controller : control_bullet 					port map (clk, reset, shoot, bullet_state1, bullet_state2, bullet_state3, shoot_bullet1, shoot_bullet2, shoot_bullet3);

end structural;
